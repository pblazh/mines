{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name mines.game, :imports nil, :requires {S clojure.string, clojure.string clojure.string}, :uses nil, :defs {initial-state {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 11, :column 7, :end-line 11, :end-column 20, :arglists (quote ([]))}, :name mines.game/initial-state, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, alive? {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 50, :column 7, :end-line 50, :end-column 13, :arglists (quote ([gamefield]))}, :name mines.game/alive?, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 13, :method-params ([gamefield]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gamefield]))}, index->position {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 28, :column 7, :end-line 28, :end-column 22, :arglists (quote ([data index]))}, :name mines.game/index->position, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 22, :method-params ([data index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data index]))}, BOMBS {:name mines.game/BOMBS, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 10, :column 1, :end-line 10, :end-column 15, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 10, :column 10, :end-line 10, :end-column 15}}, get-nearest-count {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 32, :column 7, :end-line 32, :end-column 24, :arglists (quote ([data app-state n]))}, :name mines.game/get-nearest-count, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 24, :method-params ([data app-state n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data app-state n]))}, random-gamefield {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 6, :column 7, :end-line 6, :end-column 23, :arglists (quote ([columns rows] [columns rows n])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([columns rows] [columns rows n]), :arglists ([columns rows] [columns rows n]), :arglists-meta (nil nil)}}, :name mines.game/random-gamefield, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([columns rows] [columns rows n]), :arglists ([columns rows] [columns rows n]), :arglists-meta (nil nil)}, :method-params ([columns rows] [columns rows n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists ([columns rows] [columns rows n])}, empty-gamefield {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 4, :column 7, :end-line 4, :end-column 22, :arglists (quote ([columns rows]))}, :name mines.game/empty-gamefield, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 22, :method-params ([columns rows]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([columns rows]))}, get-score {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 47, :column 7, :end-line 47, :end-column 16, :arglists (quote ([gamefield]))}, :name mines.game/get-score, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 16, :method-params ([gamefield]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gamefield]))}, position->index {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 23, :column 7, :end-line 23, :end-column 22, :arglists (quote ([data x y]))}, :name mines.game/position->index, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 22, :method-params ([data x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data x y]))}, try-complete {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 53, :column 7, :end-line 53, :end-column 19, :arglists (quote ([app-state]))}, :name mines.game/try-complete, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 19, :method-params ([app-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app-state]))}, try-square {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 61, :column 7, :end-line 61, :end-column 17, :arglists (quote ([app-state id]))}, :name mines.game/try-square, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 17, :method-params ([app-state id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app-state id]))}, mark-square {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :line 74, :column 7, :end-line 74, :end-column 18, :arglists (quote ([app-state id]))}, :name mines.game/mark-square, :variadic false, :file "/Users/pavel/work/clojure/seabattle/src/mines/game.cljs", :end-column 18, :method-params ([app-state id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app-state id]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:screen :gamefield :won :else :screen-intro :columns :time :rows :score :initial :complete :bombs}, :order [:screen :gamefield :won :columns :time :rows :score :initial :complete :bombs :screen-intro :else]}, :doc nil}