{:rename-macros {}, :renames {}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name mines.channels, :imports nil, :requires {s clojure.string, clojure.string clojure.string, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {EVENTCNANNEL {:name mines.channels/EVENTCNANNEL, :file "src/mines/channels.cljs", :line 6, :column 1, :end-line 6, :end-column 18, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/channels.cljs", :line 6, :column 6, :end-line 6, :end-column 18}}, start {:protocol-inline nil, :meta {:file "/Users/pavel/work/clojure/seabattle/src/mines/channels.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([events]))}, :name mines.channels/start, :variadic false, :file "src/mines/channels.cljs", :end-column 12, :method-params ([events]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([events]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:recur :else]}, :doc nil}